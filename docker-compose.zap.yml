services:
  backend:
    build: ./backend
    env_file:
      - .env
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:4000'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 1s
      timeout: 2s
      retries: 100
    depends_on:
      db:
        condition: service_healthy
  frontend_vite:
    build: ./frontend_vite
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:5173' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
  db:
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 1s
      timeout: 2s
      retries: 100
    env_file:
      - .env
  adminer:
    image: adminer
  apigateway:
    image: nginx
    volumes:
      - ./api_gateway/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      backend:
        condition: service_healthy
      frontend_vite:
        condition: service_healthy
      img:
        condition: service_healthy
    ports:
      - 7000:80
  img:
    build: ./img
    healthcheck:
      test: "curl --fail --request GET --url 'http://localhost:4000' || exit 1"
      interval: 1s
      timeout: 2s
      retries: 100
  zap:
    image: zaproxy/zap-stable
    command: "zap-full-scan.py -t http://apigateway -r report.html"
    volumes:
      - zapvolume:/zap/wrk/report.html
    depends_on:
      - apigateway
volumes:
  zapvolume:
